module LABTWO_wf(
	CLK,
	RSTN,
	RESULT_OUT,
	CYCLES_OUT
);


input wire	CLK;
input wire	RSTN;
output wire [31:0] RESULT_OUT;
output wire [10:0] CYCLES_OUT;


wire  [17:0] AB_mid;
wire  [17:0] AB_mid2;
wire  [17:0] AB_mid3;
wire  [17:0] AB_mid4;
wire  [16:0] C_mid;
wire	[17:0] AB;
wire	[17:0] AB2;
wire	[17:0] AB3;
wire	[17:0] AB4;
wire	[16:0] C;
wire	clkwire;
wire	[13:0] addrA0;
wire	[13:0] addrA1;
wire	[13:0] addrA2;
wire	[13:0] addrA3;
wire	[13:0] addrA4;
wire	[13:0] addrA5;
wire	[13:0] addrA6;
wire	[13:0] addrA7;
wire	[13:0] addrA8;
wire	[13:0] addrA9;
wire	[13:0] addrA10;
wire	[13:0] addrA11;
wire	[13:0] addrA12;
wire	[13:0] addrA13;
wire	[13:0] addrA14;
wire	[13:0] addrA15;
wire	[16:0] matAB01;
wire	[16:0] matAB23;
wire	[16:0] matAB45;
wire	[16:0] matAB67;
wire	[16:0] matAB89;
wire	[16:0] matABab;
wire	[16:0] matABcd;
wire	[16:0] matABef;
wire	done_switch;
wire	[20:0] result_wire;
wire  [20:0] result_mid;
wire	[6:0] addrB0;
wire	[6:0] addrB1;
wire	[6:0] addrB2;
wire	[6:0] addrB3;
wire	[6:0] addrB4;
wire	[6:0] addrB5;
wire	[6:0] addrB6;
wire	[6:0] addrB7;
wire	[6:0] addrB8;
wire	[6:0] addrB9;
wire	[6:0] addrB10;
wire	[6:0] addrB11;
wire	[6:0] addrB12;
wire	[6:0] addrB13;
wire	[6:0] addrB14;
wire	[6:0] addrB15;
wire	done_C;
wire	[6:0] addrC;
wire	[6:0] addrCnext;


edge_enforcer	b2v_inst(
	.clkin(CLK),
	.reset(RSTN),
	.clkout(clkwire));


adder17	b2v_inst12(
	.D(matAB01),
	.E(matAB23),
	.F(AB_mid));


adder17	for_extend(
	.D(matAB45),
	.E(matAB67),
	.F(AB_mid2));


adder17	for_extend2(
	.D(matAB89),
	.E(matABab),
	.F(AB_mid3));


adder17	for_extend3(
	.D(matABcd),
	.E(matABef),
	.F(AB_mid4));


acc32	b2v_inst13(
	.CLOCK(clkwire),
	.RESETL(RSTN),
	.ENABLE(done_switch),
	.IN(result_wire),
	.OUT(RESULT_OUT));


adder18	b2v_inst14(
	.data0x({1'b0,C}),
	.data1x(AB),
	.data2x(AB2),
	.data3x(AB3),
	.data4x(AB4),
	.result(result_mid));


reg17 optimizerC (
	.clk(!clkwire),
	.rstn(RSTN),
	.in(C_mid),
	.out(C)
);

reg18 optimizerAB (
	.clk(clkwire),
	.rstn(RSTN),
	.in(AB_mid),
	.out(AB)
);


reg18 optimizerAB2 (
	.clk(clkwire),
	.rstn(RSTN),
	.in(AB_mid2),
	.out(AB2)
);


reg18 optimizerAB3 (
	.clk(clkwire),
	.rstn(RSTN),
	.in(AB_mid3),
	.out(AB3)
);


reg18 optimizerAB4 (
	.clk(clkwire),
	.rstn(RSTN),
	.in(AB_mid4),
	.out(AB4)
);


reg19 optimizerABC (
	.clk(clkwire),
	.rstn(RSTN),
	.in(result_mid),
	.out(result_wire)
);

MUL_BLOCK	b2v_inst1(
	.clk(clkwire),
	.resetn(RSTN),
	.adrA(addrA0),
	.adrAnext(addrA1),
	.adrB(addrB0),
	.adrBnext(addrB1),
	.result(matAB01));


MUL_BLOCK	b2v_inst2(
	.clk(clkwire),
	.resetn(RSTN),
	.adrA(addrA2),
	.adrAnext(addrA3),
	.adrB(addrB2),
	.adrBnext(addrB3),
	.result(matAB23));


MUL_BLOCK	extend0(
	.clk(clkwire),
	.resetn(RSTN),
	.adrA(addrA4),
	.adrAnext(addrA5),
	.adrB(addrB4),
	.adrBnext(addrB5),
	.result(matAB45));


MUL_BLOCK	extend1(
	.clk(clkwire),
	.resetn(RSTN),
	.adrA(addrA6),
	.adrAnext(addrA7),
	.adrB(addrB6),
	.adrBnext(addrB7),
	.result(matAB67));


MUL_BLOCK	extend2(
	.clk(clkwire),
	.resetn(RSTN),
	.adrA(addrA8),
	.adrAnext(addrA9),
	.adrB(addrB8),
	.adrBnext(addrB9),
	.result(matAB89));


MUL_BLOCK	extend3(
	.clk(clkwire),
	.resetn(RSTN),
	.adrA(addrA10),
	.adrAnext(addrA11),
	.adrB(addrB10),
	.adrBnext(addrB11),
	.result(matABab));


MUL_BLOCK	extend4(
	.clk(clkwire),
	.resetn(RSTN),
	.adrA(addrA12),
	.adrAnext(addrA13),
	.adrB(addrB12),
	.adrBnext(addrB13),
	.result(matABcd));


MUL_BLOCK	extend5(
	.clk(clkwire),
	.resetn(RSTN),
	.adrA(addrA14),
	.adrAnext(addrA15),
	.adrB(addrB14),
	.adrBnext(addrB15),
	.result(matABef));


romC_128x1_T	b2v_inst3(
	.clk(clkwire),
	.resetn(RSTN),
	.ena(done_C),
	.adrC(addrC),
	.adrCnext(addrCnext),
	.result(C_mid));


counter_for_C	b2v_inst4(
	.clk(clkwire),
	.reset(RSTN),
	.done_n(done_C),
	.Q(addrC),
	.Qnext(addrCnext));


counter_for_B	b2v_inst5(
	.clk(clkwire),
	.reset(RSTN),
	.Q0(addrB0),
	.Q1(addrB1),
	.Q2(addrB2),
	.Q3(addrB3),
	.Q4(addrB4),
	.Q5(addrB5),
	.Q6(addrB6),
	.Q7(addrB7),
	.Q8(addrB8),
	.Q9(addrB9),
	.Q10(addrB10),
	.Q11(addrB11),
	.Q12(addrB12),
	.Q13(addrB13),
	.Q14(addrB14),
	.Q15(addrB15));


counter_for_A	b2v_inst6(
	.clk(clkwire),
	.reset(RSTN),
	.done_n(done_switch),
	.counter_out(CYCLES_OUT),
	.Q0(addrA0),
	.Q1(addrA1),
	.Q2(addrA2),
	.Q3(addrA3),
	.Q4(addrA4),
	.Q5(addrA5),
	.Q6(addrA6),
	.Q7(addrA7),
	.Q8(addrA8),
	.Q9(addrA9),
	.Q10(addrA10),
	.Q11(addrA11),
	.Q12(addrA12),
	.Q13(addrA13),
	.Q14(addrA14),
	.Q15(addrA15));


endmodule
