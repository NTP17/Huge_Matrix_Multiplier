// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/22/2023 01:58:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          romA_128x128
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module romA_128x128_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [13:0] address_a;
reg [13:0] address_b;
reg clock;
// wires                                               
wire [7:0] q_a;
wire [7:0] q_b;

// assign statements (if any)                          
romA_128x128 i1 (
// port map - connection between master ports and signals/registers   
	.address_a(address_a),
	.address_b(address_b),
	.clock(clock),
	.q_a(q_a),
	.q_b(q_b)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #500000 1'b1;
	clock = #10000 1'b0;
end 
// address_a[ 13 ]
initial
begin
	address_a[13] = 1'b0;
end 
// address_a[ 12 ]
initial
begin
	address_a[12] = 1'b0;
end 
// address_a[ 11 ]
initial
begin
	address_a[11] = 1'b0;
end 
// address_a[ 10 ]
initial
begin
	address_a[10] = 1'b0;
end 
// address_a[ 9 ]
initial
begin
	address_a[9] = 1'b0;
end 
// address_a[ 8 ]
initial
begin
	address_a[8] = 1'b0;
end 
// address_a[ 7 ]
initial
begin
	address_a[7] = 1'b0;
end 
// address_a[ 6 ]
initial
begin
	address_a[6] = 1'b0;
end 
// address_a[ 5 ]
initial
begin
	address_a[5] = 1'b0;
end 
// address_a[ 4 ]
initial
begin
	address_a[4] = 1'b0;
end 
// address_a[ 3 ]
initial
begin
	address_a[3] = 1'b0;
end 
// address_a[ 2 ]
initial
begin
	address_a[2] = 1'b0;
end 
// address_a[ 1 ]
initial
begin
	address_a[1] = 1'b0;
end 
// address_a[ 0 ]
initial
begin
	address_a[0] = 1'b0;
end 
// address_b[ 13 ]
initial
begin
	address_b[13] = 1'b0;
end 
// address_b[ 12 ]
initial
begin
	address_b[12] = 1'b0;
end 
// address_b[ 11 ]
initial
begin
	address_b[11] = 1'b0;
end 
// address_b[ 10 ]
initial
begin
	address_b[10] = 1'b0;
end 
// address_b[ 9 ]
initial
begin
	address_b[9] = 1'b0;
end 
// address_b[ 8 ]
initial
begin
	address_b[8] = 1'b0;
end 
// address_b[ 7 ]
initial
begin
	address_b[7] = 1'b0;
end 
// address_b[ 6 ]
initial
begin
	address_b[6] = 1'b0;
end 
// address_b[ 5 ]
initial
begin
	address_b[5] = 1'b0;
end 
// address_b[ 4 ]
initial
begin
	address_b[4] = 1'b0;
end 
// address_b[ 3 ]
initial
begin
	address_b[3] = 1'b0;
end 
// address_b[ 2 ]
initial
begin
	address_b[2] = 1'b0;
end 
// address_b[ 1 ]
initial
begin
	address_b[1] = 1'b0;
end 
// address_b[ 0 ]
initial
begin
	address_b[0] = 1'b1;
end 
endmodule

